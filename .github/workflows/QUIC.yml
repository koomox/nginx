name: H3-QUIC

on:
  workflow_dispatch:

env:
    PCRE2: pcre2-10.44

jobs:
  nginx_quic:
    name: Nginx 1.26.x on QUIC
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: main

      - name: Get dependencies
        run: |
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential autoconf automake libtool git wget curl
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h

      - name: Build BoringSSL
        run: |
          git clone https://boringssl.googlesource.com/boringssl
          cd boringssl
          mkdir build && cd build
          cmake ..
          make
          cd ../..
          mkdir -p boringssl/.openssl/lib
          cp boringssl/build/crypto/libcrypto.a boringssl/build/ssl/libssl.a boringssl/.openssl/lib
          cd boringssl/.openssl
          ln -s ../include .
          cd ../..

      - name: Build
        run: |
          NGINX=$(wget -qO- --no-check-certificate https://nginx.org/en/download.html | grep -m1 -E "nginx-1.26.([0-9]+).tar.gz" | sed -E "s/.*(nginx-1.26.[0-9]+).tar.gz.*/\1/gm" )
          ZLIB=$(wget -qO- --no-check-certificate https://zlib.net/ | grep -m1 -E "zlib-([0-9]+\.){0,3}tar.gz" | sed -E "s/.*(zlib-.*).tar.gz.*/\1/gm" )
          wget -qO- --no-check-certificate https://nginx.org/download/${NGINX}.tar.gz | tar -xz
          wget -qO- --no-check-certificate https://github.com/PCRE2Project/pcre2/releases/download/${PCRE2}/${PCRE2}.tar.gz | tar -xz
          wget -qO- --no-check-certificate https://www.zlib.net/${ZLIB}.tar.gz | tar -xz
          echo "NGINX=${NGINX}" >> $GITHUB_ENV

          cd ${NGINX}
          ./configure --prefix=/usr/local/nginx \
          --conf-path=/etc/nginx/nginx.conf \
          --pid-path=/var/lib/nginx/nginx.pid \
          --lock-path=/var/lib/nginx/nginx.lock \
          --with-http_ssl_module \
          --with-http_v2_module \
          --with-http_v3_module \
          --with-http_sub_module \
          --with-http_gzip_static_module \
          --with-http_slice_module \
          --with-http_stub_status_module \
          --with-stream \
          --with-stream_ssl_module \
          --with-stream_quic_module \
          --with-pcre=../${PCRE2} \
          --with-zlib=../${ZLIB} \
          --with-cc-opt="-I../boringssl/include" \
          --with-ld-opt="-L../boringssl/build/ssl -L../boringssl/build/crypto" \

          touch ../boringssl/.openssl/include/openssl/ssl.h
          make

      - name: Configure
        run: |
          mkdir -p ./targets/${{ env.NGINX }}/{sbin,logs}
                
          cd ./${{ env.NGINX }}
          cp objs/nginx ../targets/${{ env.NGINX }}/sbin/nginx
          cp -R html ../targets/${{ env.NGINX }}/
          cp -R conf ../targets/${{ env.NGINX }}/
                
          cd ../targets/${{ env.NGINX }}/conf
          cp mime.types mime.types.default
          cp fastcgi_params fastcgi_params.default
          cp fastcgi.conf fastcgi.conf.default
          cp uwsgi_params uwsgi_params.default
          cp scgi_params scgi_params.default
          cp nginx.conf nginx.conf.default

      - name: Configure file
        run: |
          cp nginx.service ./targets/${{ env.NGINX }}/
          cp -f conf.d/nginx.conf ./targets/${{ env.NGINX }}/conf/
                
          mkdir -p ./targets/${{ env.NGINX }}/conf/conf.d
          cp -f conf.d/{default.conf,fastcgi_php.conf,nginx-ssl-php.conf} ./targets/${{ env.NGINX }}/conf/conf.d/

      - name: Deploy
        run: |
          cd ./targets
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          tar czvf ${{ env.NGINX }}.tar.gz ${{ env.NGINX }}
          rm -rf ${{ env.NGINX }}
                
      - name: Upload
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.NGINX }}${{ env.FILE_DATE }}
          path: ./targets/